

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/boredddd/splix/main/ui.lua"))()
local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/ib3mexploit/the-hub/main/notification%20library", true))()
local hwidlist = loadstring(game:HttpGet(('https://raw.githubusercontent.com/eshoradecagar/eshoradecagar/main/access')))()
local HWID = game:GetService('RbxAnalyticsService'):GetClientId()
if not hwidlist[HWID] == nil then 
    game.Players.LocalPlayer:Kick('man get yo goofy ass off my script bruh :skull:')
    VLib = nil
    return
end

-- GETGENV LIBRARY
-- > FLY Library
getgenv().FlyReady = false
getgenv().FlySpeed = 250
getgenv().FlyBind = Enum.KeyCode.Z

local Window = Library:new({textsize = 14, font = 'SourceSansLight', name = 'Tidalwave', color = Color3.fromRGB(0,105,148)})


-- MAIN PAGE
local Main = Window:page({name = 'Main'})

local SuicideSection = Main:section({name = 'YOU SHOULD KILL YOURSELF', side = 'right', size = 45})
SuicideSection:button({name = 'NOW!', callback = function()
	game.Players.LocalPlayer.Character.Humanoid.Health = 0
end})


-- MAIN PAGE > GUI SETTINGS
getgenv().WindowKey = Enum.KeyCode.RightControl
Window.key = getgenv().WindowKey

local SettingsSection = Main:section({name = 'Gui Settings', side = 'left', size = 45})
SettingsSection:keybind({name = 'Gui Keybind', def = Enum.KeyCode.RightControl, callback = function(value)
	getgenv().WindowKey = value
	Window.key = getgenv().WindowKey
end})

-- MAIN PAGE > FLY SECTION
local FlySection = Main:section({name = 'Fly Hacks', side = 'left', size = 100})
FlySection:toggle({name = 'Fly Ready', def = false, callback = function(value)
    getgenv().FlyReady = value
end})
FlySection:slider({name = 'Fly Speed', def = 250, max = 250, min = 50, rounding = true, ticking = false, measuring = 'Speed', callback = function(value)
    getgenv().FlySpeed = value
end})
FlySection:keybind({name = 'Fly Keybind', def = Enum.KeyCode.Z, callback = function(value)
    getgenv().FlyBind = value
end})

local mouse = game.Players.LocalPlayer:GetMouse()
local userinput = game:GetService("UserInputService")
RunService = game:GetService("RunService")
userinput.InputBegan:Connect(function(input,typing)
	if typing then
		return
	end
	if input.KeyCode == getgenv().FlyBind and getgenv().FlyReady then
		_G.Active = true
		RunService:BindToRenderStep("flyActive", 1, function()
			if _G.Active == false then RunService:UnbindFromRenderStep("flyActive") end
			game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = mouse.Hit.lookVector * getgenv().FlySpeed
		end)
	end
end)

userinput.InputEnded:Connect(function(input)
	if input.KeyCode == getgenv().FlyBind then _G.Active = false end
end)


-- MAIN PAGE > REMOVALS

local Removals = Main:section({name = 'Safety Net', side = 'left', size = 85})

getgenv().NoFall = false
Removals:toggle({name = 'No Fall Damage', def = false, callback = function(value)
	getgenv().NoFall = value
	pcall(function()
		if value == true then
			game.Players.LocalPlayer.Character:FindFirstChild('CharacterHandler'):FindFirstChild('Remotes').FallDamage.Name = 'Ban'
		else
			game.Players.LocalPlayer.Character:FindFirstChild('CharacterHandler'):FindFirstChild('Remotes').Ban.Name = 'FallDamage'
		end
	end)
end})

local LocalPlayer = game.Players.LocalPlayer
LocalPlayer.CharacterAdded:Connect(function()
	pcall(function()
		if getgenv().NoFall then
			game.Players.LocalPlayer.Character:WaitForChild('CharacterHandler', 999):WaitForChild('Remotes', 999).FallDamage.Name = 'Ban'
		else
			game.Players.LocalPlayer.Character:WaitForChild('CharacterHandler', 999):WaitForChild('Remotes', 999).Ban.Name = 'FallDamage'
		end
	end)
end)



Removals:toggle({name = 'No Kill Bricks', def = false, callback = function(value)
	for _,v in pairs(workspace.Map:GetChildren()) do
		if v.Name == "KillBrick" or v.Name == "Lava" or v.Name == "PitKillBrick" or v.Name == "ArdorianKillbrick" or v.Name == "Fire" or v.Name == "KillFire" then
            if v:FindFirstChild("TouchInterest") then
                v.CanTouch = not value
            end
        end
	end
end})

Removals:toggle({name = 'No Orderly Barriers', def = false, callback = function(value)
	for _,v in pairs(workspace.Map:GetChildren()) do
        if v.Name == "OrderField" then
            if v:FindFirstChild("TouchInterest") then
                v.CanTouch = not value
                v.CanCollide = not value
            end
        end
    end
end})

-- ESP PAGE
local ESP = Window:page({name = 'ESP'})
local espLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Sirius/request/library/esp/esp.lua'),true))()
local EspMain = ESP:section({name = 'ESP Settings', side = 'left', size = 60})
EspMain:toggle({name = 'ESP Enabled', def = false, callback = function(value)
	if value == true then
		espLib:Load()
	else
		espLib:Unload()
	end
end})

EspMain:toggle({name = 'Out of View Arrows', def = true, callback = function(value)
	espLib.options.outOfViewArrows = value
	espLib.options.outOfViewArrowsOutline = value
end})



local Specials = Window:page({name = 'Special'})



--[[local Window = Library:new({textsize = number, font = enum, name = string, color = color3})

local Tab = Window:page({name = string})

local Section1 = Tab:section({name = string, side = string, size = number})

local Multisection = Tab:multisection({name = string, side = string, size = number})

local Section2 = Multisection:section({name = string, side = string, size = number})

Section1:toggle({name = string, def = bool, callback = function})

Section1:button({name = string, callback = function})

Section1:slider({name = string, def = number, max = number, min = number, rounding = bool, ticking = bool, measuring = string, callback = function})

Section1:dropdown({name = string, def = string, max = number, options = array, callback = function})
-- For dropdowns, put max to the number of items you have in the options.

Section1:buttonbox({name = string, def = string, max = number, options = array, callback = function})

Section1:multibox({name = string, def = array, max = number, options = array, callback = function})

Section1:textbox({name = string, def = string, placeholder = string, callback = function})

Section1:keybind({name = string, def = type, callback = function})

local Picker = Section1:colorpicker({name = string, cpname = type, def = color3, callback = function})]]
